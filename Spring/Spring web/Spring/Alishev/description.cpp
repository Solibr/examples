Lesson1 - первый простой проект, в котором создаётся bean(объект) с помощью xml конфигурации

Lesson2 - здесь применяется Inversion of Control, то есть применяется такая архитектура приложения, при которой зависимостями станосится проще управлять. Между классами MusicPlayer и, например, ClassicalMusic появляется интерфейс Music. Таким образом, с помощью полиморфизма можно проще менять конкретный класс. Класс MusicPlayer перестаёт быть зависимым от конкретных реализаций, а только от интерфейса. Точно также под интерфейс подстаиваются его будещие реализации.
Ещё это можно назвать как программирование на уровне интерфейсов

Lesson3 - применяем Dependency Injection. В xml описано, что в конструктор MusicPlayer описано какой объект внедрять

Lesson4 - внедрили зависимость через setter. Для этого в appplicationContext.xml добавили тег property который ищет сеттер по имени (имя указывается без "set") и внедряет зависимость
Помимо этого добавили некоторые значения в поля класса через этот же тег

Lesson4.1 - вынесли значения передаваемые в бин в отдельный файл musicPlayer.properties. Сослались на них из applicationContext.xml

Lesson4.2 - внедряем зависимости списком в applicationContext.xml

Lesson 5 - Scopes

Lesson 6 - Init-, Destroy-, Factory-methods. Если scope=singleton эти методы вызываются по одному разу. Для бинов со Scope=prototype каждый раз создаётся объект, поэтому factory и init методы вызываются каждый раз. При этом destroy метод не вызывается вообще - за этой логикой нужно следить вручную.

Lesson 7 - указание бинов с помощью аннотаций. Аннотация Component.

Lesson 7.1 - Попытка скомбинировать определение одного бина в xml и аннотации одновременно. Неудачно

Lesson 8 - Аннотация Autowired. 
	- Указывается или у Конструктора, или сеттера, или у поля. Указывает Spring, что сюда нужно внедрить зависимость
	- Spring найдёт подходящий бин автоматически если найдёт бин, реализующий тот тип, коорый был помечен аннотацией
	- Spring использует JavaReflection, поэтому работает даже для приватных полей без setters.
	- Spring выдаст ошибку, если будет найдено количесвто подходящих бинов != 1
	- Может быть внедрено несколько зависимлстей, если у метода помеченного аннотацией несколько аргументов

	- Аннотация Qualifier. Если есть > 1 бина в качестве зависимости, аннотация укажет id того бина, который нужно взять
	- В конструкторе можно указать аннотацию каждому аргументу

	- Аннотация Value. Позволяет присвоить полю значение из файла .properties
	- Аннотация Scope
	- Аннотация PostConstruct помечает init-method
	- Аннотация PreDestroy помечает destroy-method

Lesson9 - Конфигурирование приложения с помощью Java кода. Позволяет отказаться от xml конфигурации. 
Файла applicationContext.xml здесь больше нет. Вместо него класс Config.java
Аннотации Configuration, ComponentScan, PropertySource

Lesson9.1 - создание бинов без аннотаций Component и Autowired.
Использование аннотации Bean
Не очень удобно.

--------------
Lesson10 - первое webMVC приложение. Hello world.
Новые моменты:
	- дополнительные зависимости:
		- Spring web
		- Spring webmvc
		- thymeleaf-spring5
	- Конфигурация в web.xml
	- дополнительные вещи в конфигурации applicationConextMVC.xml
	
	- Контроллеры. Аннотации Controller, GetMapping (PostMapping, PutMapping, PatchMapping, DeleteMapping)
	- Представления. В каталоге webapp/WEB-INF/views (настраивается в applicationContextMVC.xml) располагаются html страницы, к которым будет иметь доступ Spring
	
Lesson10.1 - заменили xml конфигурацию на java код. 2 файла конфигурации на замену web.xml и applicationContextMVC.xml

Lesson11 - 
RequestMapping(value = "/url", method = RequestMrthod.GET) - аналогично GetMapping("/url")
RequestMapping("/url") - можно использовать, например, над классом, чтобы все его методы получили в начало маппинга общую часть.

Lesson12 - работа с параметрами
- Параметр HttpServletRequest
- Аннотация @RequestParam
	- атрибут required
	
Lesson13 - использование Model для передачи информации в представление

Lesson14 - калькулятор

Lesson15 - PeopleController. Задача для использования концепции REST, CRUD.
Реализация READ компонента CRUD
- thymeleaf: динамическое формирование ссылок
- thymeleaf: что-то вроде цикла. Упрощает формирование списков на html страницах.
- @PathVariable: распознавание части url как переменных

Lesson16 - Реализация CREATE компонента CRUD
- описание тега form, который нужен для отправки данных на сервер
- обработка post запроса
- использование редиректа

Lesson16.1
Добавлены новые поля в класс Person.
- уменьшение количества кода с помощью более активного использования 
ModelAttribute: как аннотации к методы или аргументу метода

Lesson17 - Реализация UPDATE компонента CRUD
Используется метод POST, хотя это не совсем правильно для изменения существующих данных.
Конфликта нет, потому что в данном случае используются разные url для POST, который добавляет и для POST, который апдейтит


Lesson17.1
Решение проблемы с отсутствием в html методов PUT, PATCH, DELETE
Использование правильных методов после модификации 
Добавление DELETE компонента

Lesson18 - валидация форм
- Завиимость hibernate validator версии 7 и ниже (с более высокими пока не разобрался почему не работает), javax.validation
	- аннотации для отдельных валидаций для полей класса
	- аннотация Valid для параметров в методах контроллера, которые будет проверяться.
	- Класс BindingResult, по которому можно проверить, есть ли ошибки в формах, после чего можно реализовать перенаправление не прежний ресурс
- атрибут к любому тегу th:if, который отображается в браузере при условии, например, наличии ошибок.
- атрибут th:errors, по которому получаем текст ошибки

Lesson19 - хранение данных в БД. SQL
Демонстрация SQL инъекции. Если в поле name при редактировании строку 
Egor' where id = 2; truncate shit; -- 
то данные удалятся

Lesson19.1 - Использование PreparedStatemant для исключения SQL инъекций

Lesson19.2 - использование jdbc template

Lesson20 - SpringValidator - продвинутаця валидация
Проверка на уникальность логина при добавлении и редактировании Person
	- Для валидации добавляем новый класс реализующий интерфейс 
	org.springframework.validation.Validator


Lesson20.1 - Регулярные выржения для 
получения строки нужного вида. Паттерн для имени Person
	- Аннотация @Pattern(regexp, message) на поле в классе Person

Lesson21 - поддержка русского языка
	Дополнительная конфигурация в файлах:
		SpringConfig.java,
		MySpringMvcDispatcherServletInitializer.java


=== < вы находитесь сдесь

Lesson22 - Выпадающий список.
	Теги <select> и <option>
	
	Не удалост принять id через @ModelAtribute.
	Кажется по причине того, что объект person в html используется как итератор для создания списка, так и для передачи данных на сервер
	Трудности в POST заспросом решены просто через @Requestparam, но хочется проверить как это решил Алишев.
	
	Нужно понять как работают теги th:field и th:object

Lesson23 - условное представление.
заострить внимание на атрибуте th:if




----
- Сделать проект под Hibernate